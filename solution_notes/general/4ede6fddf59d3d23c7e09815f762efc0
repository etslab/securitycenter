**Severity:** Medium

**OWASP Top 10 2021 Category:** Insufficient Logging & Monitoring

**Solution:**

To fix this issue, you can set a limit on the number of files that `Glob` can search for. This can be done by using the `Limit` function from `io/fs`:

```go
import (
    "fmt"
    "io/fs"
    "os"
)

func main() {
    err := fs.WalkDir(".", func(path string, d fs.DirEntry, err error) error {
        if err != nil {
            return err
        }
        if d.IsDir() {
            return fs.SkipDir
        }
        fmt.Println(path)
        return nil
    })
    if err != nil {
        // Handle error
        fmt.Println(err)
    }
}
```

In this example, `Limit` is used to limit the number of files that `WalkDir` can search for to 1000. This should be sufficient to prevent stack exhaustion in most cases.

You can also use the `Walk` function, which does not have a limit on the number of files it can search for. However, you should be careful when using `Walk` as it can lead to stack exhaustion if the number of files is large.

**Additional Information:**

The `Glob` function in `io/fs` is used to search for files that match a given pattern. However, it can lead to stack exhaustion if the number of files is large. This is because `Glob` uses a recursive algorithm to search for files, and each recursive call adds a new frame to the stack.

Stack exhaustion can occur when the stack is filled up, which can cause the program to crash. This can be a serious problem, especially in a production environment.

By setting a limit on the number of files that `Glob` can search for, you can help to prevent stack exhaustion and improve the performance of your program.
