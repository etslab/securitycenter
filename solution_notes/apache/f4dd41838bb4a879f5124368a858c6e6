**Severity:** Medium

**OWASP Top 10 2021 Category:** Broken Access Control

**Detailed Solution:**

To fix the issue, you need to ensure that the `username` parameter is properly sanitized and validated before it is used in the SQL query. This can be achieved by using a prepared statement or by escaping the input using a database-specific escaping function.

**Example (using prepared statements):**

```php
$stmt = $conn->prepare("SELECT * FROM users WHERE username = ?");
$stmt->bind_param("s", $username);
$stmt->execute();
$result = $stmt->get_result();
```

**Example (using escaping):**

```php
$username = mysqli_real_escape_string($conn, $username);
$result = mysqli_query($conn, "SELECT * FROM users WHERE username = '$username'");
```

Once the input has been sanitized, the code will not be vulnerable to SQL injection attacks.

**Additional Recommendations:**

* Use a framework that provides built-in protection against SQL injection attacks.
* Regularly update your software and dependencies to fix known vulnerabilities.
* Implement input validation on all user-controlled inputs.
* Use secure coding practices and follow best practices for web security.
