**Severity:** High

**OWASP Top 10 2021 Category:** Insufficient Logging & Monitoring

**Detailed Solution:**

This issue occurs due to an unlimited number of CONTINUATION frames being sent by malicious clients, causing excessive resource consumption and potential Denial-of-Service (DoS) attacks. To fix this issue, limit the number of CONTINUATION frames allowed per request.

**Steps to Limit CONTINUATION Frames:**

1. Import the "http2" package:
```go
import "net/http/http2"
```

2. Create a transport with a custom `DialTLS` function that sets the max number of CONTINUATION frames:
```go
transport := &http2.Transport{
    DialTLS: func(network, addr string, cfg *tls.Config) (net.Conn, error) {
        conn, err := net.DialTLS(network, addr, cfg)
        if err != nil {
            return nil, err
        }
        // Set max CONTINUATION frames to 10.
        conn.SetMaxDynamicFrameSize(10 << 20)
        return conn, nil
    },
}
```

3. Use the transport with the client:
```go
client := &http.Client{
    Transport: transport,
}
```

**Additional Mitigation:**

* Enable HTTP/2 frame logging to monitor CONTINUATION frame usage.
* Consider using a rate limiter to restrict the number of requests per client.
* Use a Web Application Firewall (WAF) to block malicious traffic.
