**Severity:** High

**OWASP Top 10 2021 Category:** A03: Injection

**Issue Description:**

The `archive/tar` package in Go allows unbounded memory consumption when reading headers in Apache servers. This can occur when the server receives a specially crafted tar archive with an excessively large header, leading to a denial of service (DoS) attack.

**Solution:**

To fix this issue, validate the tar header size before reading it. The following code snippet demonstrates how to do this:

```go
func readTarHeader(r io.Reader) (*tar.Header, error) {
    // Read the header size
    headerSizeBytes := make([]byte, tar.HeaderSize)
    if _, err := io.ReadFull(r, headerSizeBytes); err != nil {
        return nil, err
    }
    headerSize := int64(binary.LittleEndian.Uint64(headerSizeBytes))

    // Check if the header size is within a reasonable limit
    if headerSize < 0 || headerSize > maxHeaderSize {
        return nil, errors.New("invalid header size")
    }

    // Read the header
    headerBytes := make([]byte, headerSize)
    if _, err := io.ReadFull(r, headerBytes); err != nil {
        return nil, err
    }
    header := &tar.Header{}
    if err := tar.NewReader(bytes.NewReader(headerBytes)).Next(); err != nil {
        return nil, err
    }
    return header, nil
}
```

**Additional Notes:**

* The `maxHeaderSize` variable should be set to a reasonable limit, such as 10 MB.
* This issue is specific to Apache servers because they use a different tar implementation than Go.
* It is recommended to upgrade to the latest version of the `archive/tar` package, as it includes mitigations for this issue.
