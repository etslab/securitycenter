**Severity:** High

**OWASP Top 10 2021 Category:** A10:2021 - Server-Side Request Forgery (SSRF)

**Solution:**

To fix the issue, you need to implement CSRF protection measures on the affected page. This can be done by adding a CSRF token to the HTML form and verifying it on the server-side before processing the request.

**Here are the steps to fix the issue:**

1. Add a CSRF token to the HTML form. This can be done using a hidden input field, for example:

```html
<input type="hidden" name="csrf_token" value="<?= bin2hex(openssl_random_pseudo_bytes(32)) ?>">
```

2. Verify the CSRF token on the server-side before processing the request. This can be done by comparing the value of the CSRF token in the request to the value stored in the session. If the values do not match, the request should be rejected.

For example, in PHP, you can verify the CSRF token as follows:

```php
if (!isset($_POST['csrf_token']) || $_POST['csrf_token'] !== $_SESSION['csrf_token']) {
  // CSRF token is missing or invalid, reject the request
  exit;
}
```

**Additional Notes:**

* The CSRF token should be a random value that is unique for each user and each request.
* The CSRF token should be stored in a session variable or in a cookie.
* The CSRF token should be validated on every request that could potentially modify data on the server.
