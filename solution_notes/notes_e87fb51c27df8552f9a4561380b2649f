**Severity:** Medium

**OWASP Top 10 2021 Category:** Broken Access Control

**Detailed Solution:**

The issue is that the `captcha_check` function does not properly validate the captcha value before allowing access to the script. This can allow an attacker to bypass the captcha protection by sending a crafted request.

To fix this issue, add a more robust validation of the captcha value to the `captcha_check` function. One way to do this is to compare the user-provided value to a hash of the expected value.

Here is an example of how to do this in PHP:

```php
// Get the expected captcha value from the session
$expected_captcha = $_SESSION['captcha'];

// Compare the user-provided captcha value to the expected value
if (!hash_equals($user_captcha, $expected_captcha)) {
  // The captcha value is invalid. Display an error message.
  die('Invalid captcha value');
}
```

**Additional Recommendations:**

* Use a strong hashing algorithm, such as SHA-256 or bcrypt, to hash the expected captcha value.
* Consider using a captcha library that provides built-in validation functionality.
* Regularly review and update your security controls to keep up with the latest threats.
